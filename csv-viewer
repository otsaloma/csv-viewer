#!/usr/bin/env python3

# Copyright (C) 2013 Osmo Salomaa
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

import atexit
import csv
import sys

from argparse import ArgumentParser
from pathlib import Path

import gi
gi.require_version("Gdk", "4.0")
gi.require_version("Gio", "2.0")
gi.require_version("GObject", "2.0")
gi.require_version("Gtk", "4.0")

from gi.repository import Gdk
from gi.repository import Gio
from gi.repository import GLib
from gi.repository import GObject
from gi.repository import Gtk

CSS = """
.csv-view {
  font-family: monospace;
  font-size: 11px;
}"""

def set_margins(widget, margin):
    widget.set_margin_bottom(margin)
    widget.set_margin_end(margin)
    widget.set_margin_start(margin)
    widget.set_margin_top(margin)

class Row(GObject.Object):

    def __init__(self, *values):
        super().__init__()
        self.values = values

class View(Gtk.ColumnView):

    MARGIN = 6

    def __init__(self):
        model = Gtk.MultiSelection(model=Gio.ListStore())
        GObject.GObject.__init__(self, model=model)
        self.add_css_class("csv-view")
        self.set_enable_rubberband(True)
        self.set_reorderable(False)
        self.set_show_column_separators(True)
        self.set_show_row_separators(True)
        self.set_single_click_activate(False)
        # TODO: Right-align, set margins. Requires GTK 4.12.
        # factory = Gtk.SignalListItemFactory()
        # factory.connect("setup", self.on_header_setup)
        # factory.connect("bind", self.on_header_bind)
        # self.set_header_factory(factory)

    def init_columns(self, *headers):
        headers = ("#",) + headers
        for i, header in enumerate(headers):
            factory = Gtk.SignalListItemFactory()
            factory.connect("setup", self.on_list_item_setup)
            factory.connect("bind", self.on_list_item_bind, i)
            column = Gtk.ColumnViewColumn(title=header, factory=factory)
            column.set_resizable(True)
            self.append_column(column)

    def on_list_item_setup(self, factory, item):
        label = Gtk.Label()
        label.set_halign(Gtk.Align.END)
        label.set_selectable(False)
        label.set_single_line_mode(True)
        # TODO: Wait until we can set header margins too.
        # set_margins(label, self.MARGIN)
        item.set_child(label)

    def on_list_item_bind(self, factory, item, i):
        label = item.get_child()
        value = item.get_item().values[i]
        label.set_label(value)

    def append(self, *row):
        if not self.get_columns():
            return self.init_columns(*row)
        model = self.get_model().get_model()
        n = model.props.n_items + 1
        model.append(Row(f"{n:,}", *row))

class Window(Gtk.Window):

    def __init__(self, path, width, height):
        GObject.GObject.__init__(self)
        self.view = View()
        self.set_default_size(width, height)
        label = Gtk.Label()
        label.set_justify(Gtk.Justification.CENTER)
        label.set_markup(f"<b>{path.name}</b>\n<small>{path.resolve()}</small>")
        header = Gtk.HeaderBar(title_widget=label)
        self.set_titlebar(header)
        scroller = Gtk.ScrolledWindow()
        scroller.set_policy(Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC)
        scroller.set_child(self.view)
        self.set_child(scroller)
        self.load_css()
        controller = Gtk.EventControllerKey()
        controller.set_propagation_phase(Gtk.PropagationPhase.CAPTURE)
        self.add_controller(controller)
        controller.connect("key-pressed", self.on_key_pressed)

    def load_css(self):
        style = self.get_style_context()
        priority = Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION
        provider = Gtk.CssProvider()
        try:
            # The call signature of 'load_from_data' seems to have changed
            # in some GTK version. Also, the whole function is deprecated
            # and since GTK 4.12 we should use 'load_from_string'.
            provider.load_from_data(CSS, -1)
        except Exception:
            provider.load_from_data(bytes(CSS.encode()))
        display = Gdk.Display.get_default()
        style.add_provider_for_display(display, provider, priority)

    def on_key_pressed(self, event_controller_key, keyval, keycode, state, user_data=None):
        if keyval == Gdk.KEY_Escape:
            self.close()
            return True
        control = state & Gdk.ModifierType.CONTROL_MASK
        if control and keyval in [Gdk.KEY_w, Gdk.KEY_q]:
            self.close()
            return True

class Application(Gtk.Application):

    def __init__(self, args):
        GObject.GObject.__init__(self)
        self.window = None
        self.set_flags(Gio.ApplicationFlags.NON_UNIQUE)
        self.connect("activate", self.on_activate, args)

    def on_activate(self, app, args):
        args = self.parse_arguments(args)
        self.window = Window(args.path, *args.size)
        self.add_window(self.window)
        self.window.set_visible(True)
        self.render(args.path, args.limit)

    def parse_arguments(self, args):
        parser = ArgumentParser(usage="csv-viewer [OPTION...] FILE")
        parser.add_argument("-l",
                            "--limit",
                            action="store",
                            dest="limit",
                            default=100_000,
                            type=int,
                            help="maximum amount of rows to load")

        parser.add_argument("-s",
                            "--size",
                            action="store",
                            dest="size",
                            default="1000x618",
                            help="window size as WIDTHxHEIGHT")

        parser.add_argument("FILE")
        args = parser.parse_args()
        args.size = list(map(int, args.size.split("x")))
        args.path = Path(args.FILE)
        assert args.path.exists()
        return args

    def iter_lines(self, f):
        for line in f:
            if line := line.strip():
                yield line

    def render(self, path, limit):
        f = open(path, "r", encoding="utf-8", errors="replace")
        atexit.register(f.close)
        # Sniffer could also be used to detect the presence of
        # a header line, but fails if all columns hold strings.
        sniffer = csv.Sniffer()
        sample = f.read(32768)
        f.seek(0)
        try:
            dialect = sniffer.sniff(sample)
            reader = csv.reader(self.iter_lines(f), dialect)
        except Exception:
            print("Detecting dialect failed")
            print("Trying to open as a regular CSV file")
            reader = csv.reader(self.iter_lines(f), delimiter=",")
        main_context = GLib.MainContext.default()
        for i, row in enumerate(reader):
            if i > limit: break
            GLib.idle_add(self.window.view.append, *row)
            if i < 10 or i % 10 == 0:
                while main_context.pending():
                    main_context.iteration()

if __name__ == "__main__":
    app = Application(sys.argv[1:])
    raise SystemExit(app.run())
